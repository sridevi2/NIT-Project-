#define BLYNK_TEMPLATE_ID "TMPLmYwQWrWV"

#define BLYNK_DEVICE_NAME "Smart Energy Meter"
#define BLYNK_AUTH_TOKEN "IHb45Vz84KywzotK__wgj-54lwWuDyt2"

#define BLYNK_PRINT Serial
#include <WiFiClient.h>
#include "EmonLib.h"
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
EnergyMonitor emon;
#define vCalibration 20
#define currCalibration 5.0
BlynkTimer timer;
char auth[] = "IHb45Vz84KywzotK__wgj-54lwWuDyt2"; // blynk  auth token
char ssid[] = "Redmi";// wifi name
char pass[] = "Amma@2021";//password
float kWh = 0;
unsigned long lastmillis = millis();

float bill_amount = 0;   // 30 day cost as present energy usage incl approx PF 
unsigned int energyTariff = 3.0; // Energy cost in INR per unit (kWh)

void myTimerEvent()
{
emon.calcVI(2000, 2);
kWh = kWh + emon.apparentPower * (millis - lastmillis) / 3600000000.0;
bill_amount = kWh * (energyTariff/1000);
emon.realPower = -emon.realPower;
yield();
Serial.print("Vrms: ");
Serial.print(emon.Vrms, 5);
Serial.print("V");
Serial.print("\tIrms: ");
Serial.print(emon.Irms, 6);
Serial.print("A");
Serial.print("\tReal Power: ");
Serial.print(emon.realPower, 7);
Serial.print("W");
Serial.print("\tApparent Power:");
Serial.print(emon.apparentPower, 9);
Serial.print("W");
Serial.print("\tPF: ");
Serial.print(emon.powerFactor, 11);
Serial.print("PF"); 
Serial.print("\tkWh: ");
Serial.print(kWh, 5);
Serial.println("kWh");
Serial.print("\tBill Amount: INR"); 
Serial.println(String(bill_amount, 2));


delay(1000);
lastmillis = millis();
Blynk.virtualWrite(V0, emon.Vrms);
Blynk.virtualWrite(V1, emon.Irms);
Blynk.virtualWrite(V2, emon.realPower);
Blynk.virtualWrite(V3, emon.apparentPower);
Blynk.virtualWrite(V4, emon.powerFactor);
Blynk.virtualWrite(V5,kWh);
Blynk.virtualWrite(V6,bill_amount);
}
void setup()
{
Serial.begin(9600);
Blynk.begin(auth, ssid, pass);
emon.voltage(35, vCalibration, 5); // Voltage: input pin, calibration, phase_shift
emon.current(34, currCalibration); // Current: input pin, calibration.
timer.setInterval(1000L, myTimerEvent);
delay(1000);
}
void loop()
{
Blynk.run();
timer.run();
}